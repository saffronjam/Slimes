#version 430

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 1) uniform image2D img_data;

uniform int agentDim;
uniform float width;
uniform float height;
uniform float dt;
uniform	float moveSpeed;
uniform	float turnSpeed;
uniform	float sensorAngleSpacing;
uniform float maxPixelValue;

uniform vec2 sensorOffset;
uniform vec4 color;

struct Agent{
	vec2 Position;
	float Angle;
};

layout(std140, binding = 3) buffer layoutName
{
    Agent agents[];
};

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float sense(Agent agent, float sensorAngleOffset)
{
	int sensorSize = 1;

	float sensorAngle = agent.Angle + sensorAngleOffset;
	vec2 sensorDirection = vec2(cos(sensorAngle), sin(sensorAngle));
	ivec2 sensorCentre = ivec2(vec2(agent.Position) + vec2(sensorDirection * 10.0));

	float sum = 0.0;
	for(int offsetX = -sensorSize; offsetX <= sensorSize; offsetX++)
	{
		for(int offsetY = -sensorSize; offsetY <= sensorSize; offsetY++)
		{
			ivec2 pos = sensorCentre + ivec2(offsetX, offsetY);

			if(pos.x >= 0 && pos.x < width && pos.y >= 0 && pos.y <= height)
			{
				sum += imageLoad(img_data, pos).x;
			}
		}
	}

	return sum;
}

void main() {
	uint id = agentDim * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;

	Agent agent = agents[id];

	float weightForward = sense(agent, 0);
	float weightLeft = sense(agent, sensorAngleSpacing);
	float weightRight = sense(agent, -sensorAngleSpacing);
	float randomSteerStrength = rand(gl_GlobalInvocationID.xy);

	if( (weightForward + weightLeft + weightRight == 0.0) || (weightForward > weightLeft && weightForward > weightRight))
	{
		agent.Angle += 0;
	}
	else if( weightForward < weightLeft && weightForward < weightRight)
	{
		agent.Angle += (randomSteerStrength - 0.5) * 2.0 * turnSpeed * dt;
	}
	else if( weightRight > weightLeft )
	{
		agent.Angle -= randomSteerStrength * turnSpeed * dt;
	}
	else if( weightLeft > weightRight )
	{
		agent.Angle += randomSteerStrength * turnSpeed * dt;		
	}

	vec2 direction = vec2(cos(agent.Angle), sin(agent.Angle));
	vec2 newPosition = agent.Position + direction * moveSpeed * dt;

	if( newPosition.x < 0 || newPosition.x >= width || newPosition.y < 0 || newPosition.y >= height)
	{
		newPosition.x = min(width - 0.01, max(0.0, newPosition.x));
		newPosition.y = min(height - 0.01, max(0.0, newPosition.y));
		agent.Angle = 2.0 * 3.1415 * rand(vec2(agent.Angle, -agent.Angle));
	}

	agent.Position = newPosition;

	agents[id] = agent;


	float current = imageLoad(img_data, ivec2(agent.Position)).x;
	float final = min(maxPixelValue, current + (maxPixelValue - current) * 0.5 );

	// output to a specific pixel in the image
	imageStore(img_data, ivec2(agent.Position), vec4(final, 0.0, 0.0, 0.0));
}
